<!-- views/includes/upcomming_ipo.ejs -->

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<link rel="stylesheet" href="/css/upcoming_ipo.css">

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
      <h2>Upcoming IPO | Dashboard</h2>
      <!-- Instead of navigating away, simulate a click on the sidebar link for "Add Upcoming IPO Details" -->
      <button class="btn btn-primary register-btn" onclick="document.querySelector('a[data-target=\'add-upcoming-ipo-section\']').click()">Register IPO</button>
  </div>

  <div class="table-responsive">
    <table class="table table-hover" id="ipoTable">
      <thead>
        <tr>
          <th>Company</th>
          <th>Price Band</th>
          <th>Open</th>
          <th>Close</th>
          <th>ISSUE SIZE</th>
          <th>ISSUE Type</th>
          <th>Listing Date</th>
          <th>Status</th>
          <th>Action</th>
          <th>Delete/View</th>
        </tr>
      </thead>
      <tbody>
        <% ipos.forEach(ipo => { %>
          <tr>
              <td><%= ipo.companyName %></td>
              <td><%= ipo.priceBand %></td>
              <td><%= formatDate(ipo.open) %></td>
              <td><%= formatDate(ipo.close) %></td>
              <td><%= ipo.issueSize %></td>
              <td><%= ipo.issueType %></td>
              <td><%= formatDate(ipo.listingDate) %></td>
              <td>
                  <span class="badge bg-<%= getStatusColor(ipo.status) %>-light text-<%= getStatusColor(ipo.status) %>">
                      <%= ipo.status %>
                  </span>
              </td>
              <td>
                  <button class="btn btn-primary" onclick="updateIPO('<%= ipo._id %>')">Update</button>
              </td>
              <td>
                  <button class="btn btn-link text-danger" onclick="deleteIPO('<%= ipo._id %>')">
                      <i class="bi bi-trash"></i>
                  </button>
                  <button class="btn btn-link text-primary" onclick="viewIPO('<%= ipo._id %>')">
                      <i class="bi bi-eye"></i>
                  </button>
              </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>

  <nav aria-label="Page navigation" class="mt-4">
    <ul class="pagination" id="pagination">
      <% if (currentPage > 1) { %>
        <li class="page-item">
          <a class="page-link" href="?page=<%= currentPage - 1 %>">
            <i class="bi bi-chevron-left"></i>
          </a>
        </li>
      <% } %>

      <% for(let i = 1; i <= totalPages; i++) { %>
        <% if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) { %>
          <li class="page-item <%= i === currentPage ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
          </li>
        <% } else if (i === currentPage - 2 || i === currentPage + 2) { %>
          <li class="page-item"><span class="page-link">...</span></li>
        <% } %>
      <% } %>

      <% if (currentPage < totalPages) { %>
        <li class="page-item">
          <a class="page-link" href="?page=<%= currentPage + 1 %>">
            <i class="bi bi-chevron-right"></i>
          </a>
        </li>
      <% } %>
    </ul>
  </nav>
</div>

<!-- Helper functions for client-side usage -->
<script>
  // Format a date string into DD-MM-YYYY format
  function formatDate(dateString) {
      if (!dateString || dateString === "Not Issued") return "Not Issued";
      const date = new Date(dateString);
      return isNaN(date.getTime()) ? "Not Issued" : date.toLocaleDateString('en-GB').replace(/\//g, '-');
  }

  // Return badge color based on the status
  function getStatusColor(status) {
      switch(status.toLowerCase()) {
          case 'ongoing': return 'success';
          case 'coming': return 'warning';
          case 'new listed': return 'danger';
          default: return 'secondary';
      }
  }

  // Dummy functions for update, delete, and view operations.
  function updateIPO(id) {
      window.location.href = `/admin/ipo/edit/${id}`;
  }
  function deleteIPO(id) {
      if (confirm('Are you sure you want to delete this IPO?')) {
          fetch(`/api/ipos/${id}`, { method: 'DELETE' })
            .then(response => {
              if (response.ok) location.reload();
              else alert('Error deleting IPO');
            })
            .catch(err => {
              console.error(err);
              alert('Error deleting IPO');
            });
      }
  }
  function viewIPO(id) {
      window.location.href = `/admin/ipo/view/${id}`;
  }

  // Function to generate pagination HTML based on current page and total pages.
  function updatePaginationUI(currentPage, totalPages) {
      let html = '';

      if (currentPage > 1) {
          html += `<li class="page-item">
                      <a class="page-link" href="?page=${currentPage - 1}">
                        <i class="bi bi-chevron-left"></i>
                      </a>
                   </li>`;
      }

      for (let i = 1; i <= totalPages; i++) {
          if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
              html += `<li class="page-item ${i === currentPage ? 'active' : ''}">
                          <a class="page-link" href="?page=${i}">${i}</a>
                       </li>`;
          } else if (i === currentPage - 2 || i === currentPage + 2) {
              html += `<li class="page-item"><span class="page-link">...</span></li>`;
          }
      }

      if (currentPage < totalPages) {
          html += `<li class="page-item">
                      <a class="page-link" href="?page=${currentPage + 1}">
                        <i class="bi bi-chevron-right"></i>
                      </a>
                   </li>`;
      }
      return html;
  }

  // AJAX Pagination: Intercept pagination clicks and update the table and pagination dynamically.
  document.addEventListener('DOMContentLoaded', () => {
      const pagination = document.getElementById('pagination');
      pagination.addEventListener('click', async (event) => {
          event.preventDefault();
          const target = event.target.closest('a');
          if (!target) return;

          const url = new URL(target.href, window.location.origin);
          const page = url.searchParams.get('page');
          if (!page) return;

          try {
              // Fetch IPO data from the API endpoint
              const response = await fetch(`/api/ipos?page=${page}`);
              if (!response.ok) throw new Error('Failed to fetch IPO data.');
              const data = await response.json();

              // Update the table body with new IPO rows
              const tbody = document.querySelector('#ipoTable tbody');
              let rows = '';
              data.ipos.forEach(ipo => {
                  rows += `<tr>
                    <td>${ipo.companyName}</td>
                    <td>${ipo.priceBand}</td>
                    <td>${formatDate(ipo.open)}</td>
                    <td>${formatDate(ipo.close)}</td>
                    <td>${ipo.issueSize}</td>
                    <td>${ipo.issueType}</td>
                    <td>${formatDate(ipo.listingDate)}</td>
                    <td>
                      <span class="badge bg-${getStatusColor(ipo.status)}-light text-${getStatusColor(ipo.status)}">
                        ${ipo.status}
                      </span>
                    </td>
                    <td>
                      <button class="btn btn-primary" onclick="updateIPO('${ipo._id}')">Update</button>
                    </td>
                    <td>
                      <button class="btn btn-link text-danger" onclick="deleteIPO('${ipo._id}')">
                        <i class="bi bi-trash"></i>
                      </button>
                      <button class="btn btn-link text-primary" onclick="viewIPO('${ipo._id}')">
                        <i class="bi bi-eye"></i>
                      </button>
                    </td>
                  </tr>`;
              });
              tbody.innerHTML = rows;

              // Update the pagination UI using the returned currentPage and totalPages values
              pagination.innerHTML = updatePaginationUI(data.currentPage, data.totalPages);
          } catch (error) {
              console.error('Error during AJAX pagination:', error);
          }
      });
  });
</script>

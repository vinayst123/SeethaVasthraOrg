// Management API
// app.get('/management/apis', async (req, res) => {
//   const apis = await Api.find();
//   res.json(apis);
// });

// app.post('/management/apis', async (req, res) => {
//   try {
//     const apiConfig = req.body;

//     if (apiConfig.responseType === 'template') {
//       const templatePath = path.join(TEMPLATES_DIR, apiConfig.templateFile);
//       fs.writeFileSync(templatePath, apiConfig.templateContent);
//     } else {
//       const filePath = path.join(RESPONSES_DIR, apiConfig.responseFile);
//       if (!fs.existsSync(filePath)) {
//         return res.status(400).json({ error: 'Response file not found' });
//       }
//     }

//     const newApi = new Api({
//       ...apiConfig,
//       responseStatus: parseInt(apiConfig.responseStatus) || 200,
//     });

//     await newApi.save();
//     res.status(201).json(newApi);
//   } catch (error) {
//     res.status(400).json({ error: error.message });
//   }
// });


// app.put('/management/apis/:id', async (req, res) => {
//   try {
//     const apiConfig = req.body;
//     const api = await Api.findById(req.params.id);
//     if (!api) return res.status(404).json({ error: 'API not found' });

//     if (apiConfig.responseType === 'template') {
//       const templatePath = path.join(TEMPLATES_DIR, apiConfig.templateFile);
//       fs.writeFileSync(templatePath, apiConfig.templateContent);
//     }

//     Object.assign(api, apiConfig, { updatedAt: new Date() });
//     await api.save();

//     res.json(api);
//   } catch (error) {
//     res.status(400).json({ error: error.message });
//   }
// });

// app.delete('/management/apis/:id', async (req, res) => {
//   try {
//     const { id } = req.params;
//     if (!mongoose.Types.ObjectId.isValid(id)) {
//       return res.status(400).json({ error: 'Invalid API ID' });
//     }
//     const deletedApi = await Api.findByIdAndDelete(id);
//     if (!deletedApi) {
//       return res.status(404).json({ error: 'API not found' });
//     }
//     res.sendStatus(204);
//   } catch (error) {
//     res.status(500).json({ error: error.message });
//   }
// });


const user = new User({
    username: 'admin',
    password: bcrypt.hashSync('securepassword', 12)
  });
  user.save();